[{"title":"2019暑假夏令营收获与感受","url":"/2019/07/14/2019暑假夏令营收获与感受/","content":"<p>学院好像每年的寒暑假都会举办冬令营夏令营等活动，但无奈之前几次都因为一些自己的原因没能报名参与。这次与之前不同的是之前每次学院都会让辅导员宣传，但这次却没有，弄得我还以为是不收大二的学生了，好在我在学院官方的微信公众号上看到了报名信息，然后跟相关负责人联系确定后才报上了名。</p>\n<p>这次夏令营共有三个项目，我选择了与自己的专业相关性最高的由薪享鸿福公司带来的IT夏令营，时间不长只有五天，但是因为上下午都要上课，感觉学时上差不多比得上一个选修课了。事实上最后学到的东西真的还是挺多的，只不过感觉有点不适合我这种大二的学生了，有相当一部分内容都是我已经接触了解过了的。但不得不说这些课程都是实用性很高的内容，基本也是每个互联网行业从业人都要了解的东西。与学校的理论课程偏枯燥无味不同，夏令营的课程更偏向实践性，学练结合能够使大家都积极参与到课程内容中。再加上杜老师风趣幽默的授课方式，同学们上课时的热情都很高涨，整堂课都会很充实，感觉时间过得很快。</p>\n<p>整个IT精英夏令营课程从VMware软件的安装与认识，到在VMware软件安装Linux虚拟操作系统，然后认识Linux系统与常用命令，最后在Linux系统内使用命令行软件完成个人博客网页的建站，层层深入，其中最难的也是最让我感兴趣的就是个人博客的建站了。在这之前一直有个拥有一个自己的小站的想法，但苦于不知道内容方面该往哪个方向写，就一直搁置了。通过这次学习，我算是完成了这个想法的第一步，初步拥有了一个属于自己的小站。等我完全完成自己网站的基本框架布局之后，应该尽快明确一个方向进行一些创作，再买一个自己的域名就更完美了。老师教授的是使用工具类软件自动建站，这可能是目前最高效的建站方式，但是想要得到自己非常满意的网页，还是要对H5和Js有些初步的了解，好对自己网页的局部进行美化与修改。但是由于课时的紧张，这部分内容丝毫没有涉及，算是一个小小的遗憾吧。当然，这部分网上的教程也是比较多的，后期在通过一些自学也是极好的。</p>\n<p>整体上来说这次夏令营还是非常满意的，既学到了知识和有用的技能，也结识了一些新的优秀同学，大家都很积极好学，相关负责人门也都很尽责，最重要的是认识了杜老师，既风趣幽默，同时又是技术大牛，有很多社会上的经验分享给我们，使大家受益匪浅。可能唯一不好的一点就是我是大二的跨校区需要来回搬运的床褥。总的来说，以后如果还有这种课外活动，我应该还会选择积极的参与进来。最后，感谢学院能够免费提供给我们这次机会，也非常感谢杜老师的认真讲解与释疑。</p>\n","tags":["心得"]},{"title":"7月10日使用hexo搭建个人博客","url":"/2019/07/14/7月10日使用hexo搭建个人博客/","content":"\n## **搭建步骤：**\n\n### ***搭建可本地访问的博客***\n\n- **安装Node.js**\n\n  ```basemake\n  sudo apt install node nodejs-bin\n  ```\n\n- **安装Hexo**\n\n  <br>Hexo就是我们的个人博客网站的框架，使用npm命令安装Hexo，输入：\n\n  ```bash\n  sudo npm install hexo-cli -g \n  ```\n\n  这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：\n\n  ```bash\n  hexo init blog\n  ```\n\n  打开自动新建的blog文件夹\n\n  ```\n  cd blog\n  ```\n\n  为了检测我们的网站雏形，分别按顺序输入以下三条命令：\n\n  ```bash\n  npm install\n  hexo g\n  hexo s\n  ```\n\n <br> 这些命令在后面作介绍，完成后，打开浏览器输入地址：</br>\n\n  <br>localhost:4000</br>\n\n  <br>可以看到我们写出第一篇默认博客</br></br>\n\n- **安装gedit并编辑博客文章**\n\n  <br>使用以下命令安装gedit\n\n  ```\n  sudo apt install gedit\n  ```\n\n  顺序使用一下命令生成新的文章并更新部署\n\n  ```\n  hexo new \"TITLE\" （TITLE为文章标题）\n  gedit ~/...md （~/...md）为文章路径，此句打开编辑器使用markdown编辑内容后保存并关闭）\n  hexo g\n  hexo d\n  hexo s\n  ```\n\n  <br>完成后，打开浏览器输入地址：</br>\n\n  <br>localhost:4000</br>\n\n  <br>可以看出我们更新后的博客</br></br>\n\n### 结合GitHub搭建可互联网访问的博客\n\n- **GitHub创建个人仓库**\n\n  <br>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号。点击GitHub中的New repository创建新仓库，仓库名应该为：**用户名**.github.io 这个**用户名**使用你的GitHub帐号名称代替，这是固定写法。<br>\n\n- **安装Git**\n\n  <br>什么是Git?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。\n\n  ```\n  sudo apt install git\n  ```\n\n  安装Git部署插件，输入命令：\n\n  ```basemake\n  sudo npm install hexo-deployer-git --save\n  ```\n\n  设置user.name和user.email配置信息：\n\n  ```bash\n  git config --global user.name \"你的GitHub用户名\"\n  git config --global user.email \"你的GitHub注册邮箱\"\n  ```\n  <br>\n\n- **编辑hexo主配置文件，将我们的Hexo与GitHub关联起来**\n\n  ```\n  cd blog\n  gedit _config.yml\n  ```\n\n  打开站点的配置文件_config.yml，翻到最后修改为：\n\n  ```\n  deploy: \n   type: git\n   repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git\n   branch: master\n  ```\n\n  保存站点配置文件。\n\n  其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。\n\n  这时，我们分别输入两条命令：\n\n  ```bash\n  hexo g \n  hexo d\n  ```\n\n  其中第二条的 hexo d 就是部署网站命令，d是deploy的缩写。命令后需要我们先后输入GitHub的用户名与密码，按照提示完成操作即可。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径,就可以在线看到我们的博客了。\n\n### 其他\n\n- **初识Markdown语法**\n\n  <br>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：[Markdown教程(菜鸟教程)](https://www.runoob.com/markdown/md-tutorial.html) 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。<br>\n\n- **发布文章**\n\n  <br>我们开始正式发布上线博客文章，在命令行中输入：\n\n  ```bash\n  hexo n \"博客名字\"\n  ```\n\n  我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 **博客名字.md** 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入Github链接浏览。<br>\n\n\n","tags":["笔记","教程"]},{"title":"7月8日VMware内虚拟机系统的安装","url":"/2019/07/12/7月8日VMware内虚拟机系统的安装/","content":"\n## 以deepin系统的安装为例\n\n### 1.VMware内新建新的虚拟机运行环境\n\n- **VMware主页面点击左上角文件按钮选择新建虚拟机并按照如下图片顺序操作**\n\n![1](/img/7.8/1.png)\n\n![2](/img/7.8/2.png)\n\n![3](/img/7.8/3.jpg)\n\n![4](/img/7.8/4.jpg)\n\n> 注意本例安装deepin系统选择Linux并选择Debian，注意选择所要安装系统的对应版本\n\n![5](/img/7.8/5.jpg)\n\n> 自定义虚拟机名称与安装位置，注意保证空间充足\n\n![6](/img/7.8/6.png)\n\n> 根据自己需求自定义磁盘空间大小\n\n![7](/img/7.8/7.jpg)\n\n![8](/img/7.8/8.png)\n\n![9](/img/7.8/9.png)\n\n> 点击编辑虚拟机设置，在CD/DVD设置使用ISO镜像文件并选择所要安装的镜像文件\n\n### 2.VMware内Debian系统的安装\n\n- **开启此虚拟机并按图顺序进行以下操作**\n\n![10](/img/7.8/10.png)\n\n![11](/img/7.8/11.png)\n\n![12](/img/7.8/12.png)\n\n![13](/img/7.8/13.png)\n\n- **自定义用户名与密码并选择时区**\n\n![14](/img/7.8/14.png)\n\n![15](/img/7.8/15.png)\n\n- **选择安装位置并格式化磁盘，如图操作**\n\n![16](/img/7.8/16.png)\n\n![17](/img/7.8/17.png)\n\n![18](/img/7.8/18.png)\n\n- **安装完成，重启后输入密码进入系统**\n\n![19](/img/7.8/19.png)\n\n![20](/img/7.8/20.png)\n\n![21](/img/7.8/21.png)\n\n\n\n","tags":["笔记","教程"]},{"title":"7月9日Linux命令的使用","url":"/2019/07/11/7月9日Linux命令的使用/","content":"\n## 1.命令结构\n### 命令 -选项 参数\n#### 注意事项\n* 多个选项可以写在一起\n+ 多个选项不区分选项的顺序\n\n## 2.系统级命令\n\n|  命令   |  命令全称  |命令含义\n|  :----:  |  :----:  |  :----:  |\n| mkdir  | make directory |创建目录|\n| ls  | list |显示目录中的文件\n|touch|touch|创建文件|\n|rm|remove|删除文件|\n|cd|change directory|切换目录|\n\n## 3.yum命令\n命令|命令含义\n:-:|:----:\nyum list|显示软件列表\nyum install APPNAME|安装指定软件\nyum search APPNAME|搜索相关软件\nyum check-update|检查软件是否需要更新\nyum update APPNAME|更新指定软件\nyum update|更新所有软件\nyum remove APPNAME|卸载指定软件\n","tags":["笔记","教程"]},{"title":"7月7日VMware的安装","url":"/2019/07/10/7月7日 VMware的安装/","content":"\n* 双击打开安装文件并点击下一步\n![双击打开安装文件并点击下一步](/1.png)\n* 接受许可协议并点击下一步 \n![接受许可协议并点击下一步](/2.png) \n* 选择安装目录，选择是否键盘增强并点击下一步\n![选择安装目录，选择是否键盘增强并点击下一步](/3.png) \n* 选择启动更新检查，选择是否加入体验计划并点击下一步\n![选择启动更新检查，选择是否加入体验计划并点击下一步](/4.png) \n* 选择创建快捷方式位置并点击下一步\n![选择创建快捷方式位置并点击下一步](/5.png) \n* 开始安装\n![开始安装](/6.png) \n* 安装完成，点击完成填写许可证密钥\n![安装完成，点击完成填写许可证密钥](/7.png)\n* 密钥填写完成\n![密钥填写完成](/9.png) \n* 安装完成，检查激活状态\n![安装完成，检查激活状态](/10.png)\n","tags":["笔记","教程"]}]